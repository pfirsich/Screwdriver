# ToDo
* MetadataBoolean, MetadataString, MetadataNumber, MetadataChoice (choices = list of id-label pairs)
	Maybe leave these out since they are just a single gui element and make the intended way implementing custom components?
		Downside: For every entity type in game you would have to create a new component type = No.
	MetadataEntity? Draws connections (on-off-able) and has an edit mode to connect entities (maybe a dropdown?)

# Später
* Fix fans - siehe fan_triang.jpg
* Ein "Lineal" um Jump-Height und so im Spiel sehen zu können
* keepAspect ratio wieder einbauen und reparieren. Dafür in onChange einhooken und gleichsetzen, dann gui.lua so modifizieren, dass bei cliExec für geindexte Variablen (z.B. position[1]), der ganze Tupel gesetzt wird.
* Show centers of mass for polygons (to see the origin for texture rotation)
* edit mode fürs offsetting - vermutlich nicht, da man das in der Regel genau machen will
* File type Filter im Filebrowser
* "spacing"-gui elemente, die Strukturierung etwas einfacher machen? (bzw. möglich)

# Vielleicht
* Fancy Fancy polygons integrieren. Entweder nur bei cliExec oder optional pro Polygon (remesh in modes/onChange ausschalten!)
* Map nicht nur als Lua speichern (sodass der Editor für alles mögliche verwendet werden kann) - JSON?
* Farbe und Transforms in ein Textur-Component verschieben und das an Entities hängen
* __showInDetails ist Quark. Stattdessen ne getDetails() Funktion für Components implementieren.
* Umnennen: ScrewEd?
* Arrow key + enter Bedienung im filebrowser
* Texture-GUI-Element, das File + Preview ist
* onFocusLost an cliExec für alle anderen Widgets binden
* Implement cmd for Numberwheel, String and Checkbox gui elements
* specialModes in globalModes verwandeln und alles vom normalen editor-mode darein verschieben und schöner machen
	gui.base wird dann globalModes[currentMode].gui oder gui[currentMode] oder gui.base[currentMode] oder globalMode.gui (globalMode hält dann immer den aktuellen Mode)
	Vielleicht aber auch nicht, damit die Funktionsaufrufe im CLI nicht so doof aussehen und alles etwas einfacher ist? -> Markus fragen
* Nochmal genau überlegen was in editor und was in map gehört oder was global ist.
	vllt. nur Dinge in editor in der cli zulassen und alles andere vorher nillen. Dann auch alles aus global entfernen, was man vllt. benutzen könnte aber nicht sollte und sonst vllt. nach editor verschieben.
* Up/Down key in console (history)
* Only show component-info in scene window if component is actually used in the scene
* Limit number of lines in console -> config file maybe?
* Properly passing mousewheel events so scrollbars do what they should do at all times
* Falls komplette deepe Kopien von map auf dem Mapstack ein Speicherproblem bergen, nur alle X einträge voll speichern + delta-befehle
* J-Query mäßig verschiedene Entites selecten (nach id/type) und operationen anwenden

# Notizen
* recenter() wurde bei jeder Modifikation aufgerufen. Dadurch hat jede Modifikation auch die Texturkoordinaten verändert, jedoch war der 
Mittelpunkt des Polygons immer an einer praktischen Stelle

# Bugs:
* Up/Down mit multiple selection macht funky sachen, wenn alle ausgewählten schon ganz oben sind
* editModes kacken ein bisschen ab, wenn man position, scale oder rotation des Transform-Components auf nil setzt